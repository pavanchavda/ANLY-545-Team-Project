data$diff <- data$pretest-215
fakedata <- expand.grid(day = seq(1,90,1), patient = seq(1,15,1))
fakedata$pt <- ifelse(fakedata$day >= 46,1,0)
fakedata$painlevel<- 70 – fakedata$day/3 + fakedata$pt*-15+ rnorm(1350,0,10)
View(fakedata)
View(fakedata)
View(data)
#Let's first only keep the variables that we are interested in.
data2 <- data %>%
select(ID, treat, pretest, posttest)
library(dplyr); library(ggplot2); library(readxl); library(car); library(moments); library(stats); library(car); library(ez); library(lmerTest); library(afex); library(emmeans); library(lattice); library(melt)
library(dplyr); library(ggplot2); library(readxl); library(car); library(moments); library(stats); library(car); library(ez); library(lmerTest); library(afex); library(emmeans); library(lattice); library(reshape2)
View(data2)
#Now, let's go ahead and melt our data to combine test scores from different columns..
meltdata <- melt(data2,id=c("ID", "treat"))
View(meltdata)
#Now, let's go ahead and convert pretest score into 0 and posttest score into 1.
meltdata <- ifelse(meltdata$variable=="pretest",0,1)
data <- read_xls("F:/HU/ANLY 510/Week 9/RDD Example.xls", sheet = "Data")
#Converting categorical variable to factor
data$ID <- as.factor(data$ID)
columns <- c(1:9,13)
data[,columns] <- lapply(data[,columns],as.factor)
#Let's first only keep the variables that we are interested in.
data2 <- data %>%
select(ID, treat, pretest, posttest)
#Now, let's go ahead and melt our data to combine test scores from different columns..
meltdata <- melt(data2,id=c("ID", "treat"))
#Now, let's go ahead and convert pretest score into 0 and posttest score into 1.
meltdata$variable <- ifelse(meltdata$variable=="pretest",0,1)
View(meltdata)
View(meltdata)
colnames(meltdata) <- c("id", "treat", "testtype", "score")
#Let's first plot our data.
xyplot(score~testtype,data=data)
#Let's first plot our data.
xyplot(score~testtype,data=meltdata)
#Now, let's create a new variable for the difference between test score and cut off.
meltdata$diff <- meltdata$score-215
#Now, let's run the regression and see if main effect is significant.
model <- lmer(score~diff*treat+(1|id),data=meltdata)
str(melt)
str(meltdata)
meltdata$testtype <- as.factor(meltdata)
meltdata$testtype <- as.factor(meltdata$testtype)
#Now, let's run the regression and see if main effect is significant.
model <- lmer(score~diff*treat+(1|id),data=meltdata)
#Now, let's run the regression and see if main effect is significant.
model <- lmer(score~diff*testtype+(1|id),data=meltdata)
View(model)
summary(model)
#Now, let's first plot our data.
xyplot(pretest~posttest,data=data2)
#Now, let's first plot our data.
xyplot(posttest~pretest,data=data2)
#Let's first plot our data.
xyplot(score~testtype,data=meltdata,groups = treat, col=c("black","red"))
#Now, let's first plot our data.
xyplot(posttest~pretest,data=data2,groups = treat, col=c("black","red"))
#Let's first plot our data.
xyplot(score~testtype,data=meltdata,groups = treat, col=c("black","red"),type=c("p","r"))
#Now, let's first plot our data.
xyplot(posttest~pretest,data=data2,groups = treat, col=c("black","red"),type=c("p","r"))
#Now, let's first plot our data.
xyplot(posttest~pretest,data=data2,groups = treat, col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
#Now, let's first plot our data.
xyplot(pretest~posttest,data=data2,groups = treat, col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
#Now, let's first plot our data.
xyplot(posttest~pretest,data=data2,groups = treat, col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
data2$scorediff <- data2$pretest-215
View(data2)
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat+(1|ID),data=data2)
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat+(1|ID),data=data2)
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat,data=data2)
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat+(1|ID),data=data2)
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff,data=data2)
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat+(1),data=data2)
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat+(1|ID),data=data2)
data2$scorediff <- data2$posttest-215
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat+(1|ID),data=data2)
data2$scorediff <- data2$pretest-215
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat+(1|ID),data=data2)
str(data2)
View(meltdata)
#Now, let's run the regression and see if main effect is significant.
model <- lmer(score~diff*treat+(1|id),data=meltdata)
#Now, let's go ahead and run the regression.
model <- lm(posttest~scorediff*treat+(1|ID),data=data2)
#Now, let's go ahead and melt our data to combine test scores from different columns..
meltdata <- melt(data2,id=c("ID", "treat"))
colnames(meltdata) <- c("id", "treat", "testtype", "score")
View(meltdata)
#Let's first only keep the variables that we are interested in.
data2 <- data %>%
select(ID, treat, pretest, posttest)
#Now, let's go ahead and melt our data to combine test scores from different columns..
meltdata <- melt(data2,id=c("ID", "treat"))
colnames(meltdata) <- c("id", "treat", "testtype", "score")
View(meltdata)
View(meltdata)
meltdata$scorediff <- meltdata$score-215
View(meltdata)
#Now, let's run the regression and see if main effect is significant.
model <- lmer(score~diff*treat+(1|id),data=meltdata)
View(meltdata)
#Now, let's run the regression and see if main effect is significant.
model <- lm(score~scorediff*treat+(1|id),data=data2)
View(meltdata)
#Now, let's run the regression and see if main effect is significant.
model <- lmer(score~scorediff*treat+(1|id),data=meltdata)
summary(model)
#Now, let's first plot our data.
xyplot(posttest~pretest,data=data2,groups = treat, col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
data2$scorediff <- data2$pretest-215
#Now, let's go ahead and run the regression.
model <- lm(posttest~scorediff*treat+(1|ID),data=data2)
#Now, let's go ahead and run the regression.
model <- lm(posttest~pretest*scorediff*treat+(1|ID),data=data2)
#Now, let's go ahead and run the regression.
model <- lm(posttest~scorediff*treat+(1|ID),data=data2)
str(data2)
data2$ID <- as.numeric(data2$ID)
str(data2)
#Let's first only keep the variables that we are interested in.
data2 <- data %>%
select(ID, treat, pretest, posttest)
#Converting categorical variable to factor
columns <- c(2:9,13)
data[,columns] <- lapply(data[,columns],as.factor)
#Let's first only keep the variables that we are interested in.
data2 <- data %>%
select(ID, treat, pretest, posttest)
str(data2)
data2$ID <- as.character(data2$ID)
data2$ID <- as.numeric(data2$ID)
str(data2)
#Now, let's first plot our data.
xyplot(posttest~pretest,data=data2,groups = treat, col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
data2$scorediff <- data2$pretest-215
#Now, let's go ahead and run the regression.
model <- lm(posttest~scorediff*treat+(1|ID),data=data2)
summary(model)
View(data2)
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat+(1|ID),data=data2)
#Now, let's go ahead and run the regression.
model <- lmer(posttest~scorediff*treat+(1|ID),data=data2)
summary(model)
fakedata <- expand.grid(day = seq(1,90,1), patient = seq(1,15,1))
fakedata$pt <- ifelse(fakedata$day >= 46,1,0)
fakedata$painlevel<- 70 – fakedata$day/3 + fakedata$pt*-15+ rnorm(1350,0,10)
fakedata$painlevel<- 70 – fakedata$day/3 + fakedata$pt*-15+ rnorm(1350,0,10)
fakedata$painlevel<- 70 - fakedata$day/3 + fakedata$pt*-15+ rnorm(1350,0,10)
xyplot(painlevel~day,fakedata,xlab="Day",ylab="Pain",pch=c(19,17),groups=pt,col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
View(fakedata)
View(data2)
data <- read_xls("F:/HU/ANLY 510/Week 9/RDD Example.xls", sheet = "Data")
#Converting categorical variable to factor
columns <- c(2:9,13)
data[,columns] <- lapply(data[,columns],as.factor)
#Let's first only keep the variables that we are interested in.
data2 <- data %>%
select(ID, treat, pretest, posttest)
data3 <- melt(data2, id=c("ID", "treat"))
View(data3)
data3$variable <- ifelse(data3$variable=="pretest",0,1)
View(data3)
View(data3)
colnames(data3) <- c("id","treat","preorpost","testscore")
View(data3)
data3$scorediff <- data3$testscore-215
#Now, let's go ahead and run the regression.
model <- lmer(testscore~scorediff*treat+(1|id),data=data3)
summary(model)
View(data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~scorediff+treat+(1|id),data=data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat+(1|id),data=data3)
summary(model)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat*scorediff+(1|id),data=data3)
View(data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat*scorediff+(1|id),data=data3)
View(data3)
str(data3)
data3$id <- as.factor(data3$id)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat*scorediff+(1|id),data=data3)
summary(model)
str(data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~preorpost*scorediff+(1|id),data=data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~preorpost+treat*scorediff+(1|id),data=data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat+scorediff+(1|id),data=data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat*scorediff+(1|id),data=data3)
#Now, let's go ahead and run the regression.
model <- lmer(scale(testscore)~treat*scorediff+(1|id),data=data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat*scorediff+(1+preorpost|id),data=data3)
summary(model)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat*scorediff*preorpost+(1+|id),data=data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat*scorediff+(1|id),data=data3)
summary(model)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat*scorediff+(1|id),data=data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat+scorediff+(1|id),data=data3)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat+(1|id),data=data3)
summary(model)
#Now, let's go ahead and run the regression.
model <- lmer(testscore~treat*scorediff+(1|id),data=data3)
model2 <- lmer(testscore~treat+scorediff+(1|id),data=data3)
model2 <- lmer(testscore~treat+(1|id),data=data3)
summary(model)
summary(model2)
model2 <- lmer(testscore~treat+scorediff,data=data3)
model2 <- lmer(testscore~treat+scorediff*(1|id),data=data3)
model2 <- lmer(testscore~treat+scorediff+(1|id),data=data3)
model2 <- lmer(testscore~treat+(1|id),data=data3)
summary(model2)
xyplot(testscore~preorpost,data=data3,groups = treat, col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
xyplot(preorpost~testscore,data=data3,groups = treat, col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
xyplot(testscore~preorpost,data=data3,groups = treat, col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
summary(model2)
data <- read_xls("F:/HU/ANLY 510/Week 9/RDD Example.xls", sheet = "Data")
#Converting categorical variable to factor
columns <- c(2:9,13)
data[,columns] <- lapply(data[,columns],as.factor)
#Converting categorical variable to factor
columns <- c(1:9,13)
data[,columns] <- lapply(data[,columns],as.factor)
#Let's first only keep the variables that we are interested in.
data2 <- data %>%
select(ID, treat, pretest, posttest)
#The score for pre or post test are separate in our data set. Let's melt our data to combine the test scores.
data3 <- melt(data2, id=c("ID", "treat"))
data3$variable <- ifelse(data3$variable=="pretest",0,1)
colnames(data3) <- c("id","treat","preorpost","testscore")
#Now, let's first plot our data.
xyplot(testscore~preorpost,data=data3,groups = treat, col=c("black","red"),type=c("p","r"),lwd=2,lty=c(2,1))
data3$scorediff <- data3$testscore-215
model2 <- lmer(testscore~treat+(1|id),data=data3)
summary(model2)
data <- read.csv("C:/Users/Pavan/Documents/GitHub/ANLY-545-Team-Project/Data/gun-violence-data.csv")
str(data)
View(data)
library(dplyr); library(ggplot2); library(plotly)l library(lubridate)
View(data)
data$date <- mdy(data$date)
data$date <- mdy(data$date)
library(dplyr); library(ggplot2); library(plotly)l library(lubridate)
library(dplyr); library(ggplot2); library(plotly); library(lubridate)
data$date <- mdy(data$date)
#No. of incidents by State
incidents_by_state <- data %>% group_by(state) %>% summarise(total_injured = sum(n_injured))
View(incidents_by_state)
#No. of incidents by State
incidents_by_state <- data %>% group_by(state) %>% summarise(total_injured = sum(n_injured)) %>% arrange(desc)
View(incidents_by_state)
View(incidents_by_state)
#No. of incidents by State
incidents_by_state <- data %>% group_by(state) %>% summarise(total_injured = sum(n_injured)) %>% arrange(desc(total_injured))
View(incidents_by_state)
#No. of incidents by State
incidents_by_state <- data %>%
group_by(state) %>%
summarise(total_injured = sum(n_injured),
total_killed = sum(n_killed)) %>%
arrange(desc(total_injured,total_killed))
View(incidents_by_state)
library(dplyr); library(ggplot2); library(plotly); library(lubridate); library(leaflet)
library(dplyr); library(ggplot2); library(plotly); library(lubridate); library(leaflet); library(rgdal)
statesUS <- readOGR("tl_2018_us_state", layer = "tl_2018_us_state", GDAL1_integer64_policy = TRUE)
setwd("C:/Users/Pavan/Documents/GitHub/ANLY-545-Team-Project/Data")
statesUS <- readOGR("tl_2018_us_state", layer = "tl_2018_us_state", GDAL1_integer64_policy = TRUE)
View(statesUS)
View(data)
#No. of incidents by State
incidents_by_state <- data %>%
group_by(state) %>%
summarise(total_incidents = count(incident_id),
total_injured = sum(n_injured),
total_killed = sum(n_killed)) %>%
arrange(desc(total_injured,total_killed))
#No. of incidents by State
incidents_by_state <- data %>%
group_by(state) %>%
summarise(total_incidents = n(incident_id),
total_injured = sum(n_injured),
total_killed = sum(n_killed)) %>%
arrange(desc(total_injured,total_killed))
#No. of incidents by State
incidents_by_state <- data %>%
group_by(state) %>%
summarise(total_incidents = n(),
total_injured = sum(n_injured),
total_killed = sum(n_killed)) %>%
arrange(desc(total_injured,total_killed))
View(incidents_by_state)
View(incidents_by_state)
bins <- c(0, 5000, 7500, 10000, 15000, 20000)
pal <- colorBin("YlOrRd", domain = statesUS2$average.payments, bins = bins)
pal <- colorBin("YlOrRd", domain = incidents_by_state$total_incidents, bins = bins)
leaflet(data = incidents_by_state) %>%
setView(lng=-96, lat=37.8, zoom=4) %>%
addProviderTiles("MapBox", options = providerTileOptions(id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(per100k),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~per100k, opacity = 0.7, title = "Incidents", position = "bottomright")
leaflet(data = incidents_by_state) %>%
setView(lng=-96, lat=37.8, zoom=4) %>%
addProviderTiles("MapBox", options = providerTileOptions(id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(total_incidents),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~total_incidents, opacity = 0.7, title = "Incidents", position = "bottomright")
leaflet(data = incidents_by_state) %>%
setView(lng=-96, lat=37.8, zoom=4) %>%
addTiles() %>%
addProviderTiles("MapBox", options = providerTileOptions(id = "mapbox.light",accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(total_incidents),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~total_incidents, opacity = 0.7, title = "Incidents", position = "bottomright")
leaflet(data = incidents_by_state) %>%
setView(-96, 37.8, 4) %>%
addTiles() %>%
addProviderTiles("MapBox", options = providerTileOptions(id = "mapbox.light",accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(total_incidents),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~total_incidents, opacity = 0.7, title = "Incidents", position = "bottomright")
View(statesUS)
View(incidents_by_state)
incidents_by_state2 <- merge(statesUS, incidents_by_state, by.x="NAME", by.y="state")
incidents_by_state2 <- merge(statesUS, incidents_by_state, by.x="NAME", by.y="state")
bins <- c(0, 5000, 7500, 10000, 15000, 20000)
pal <- colorBin("YlOrRd", domain = incidents_by_state2$total_incidents, bins = bins)
labels <- paste0("<strong>State: </strong>",
incidents_by_state2$state,
incidents_by_state2$total_incidents,
incidents_by_state2$total_injured,
incidents_by_state2$total_killed) %>% lapply(htmltools::HTML)
leaflet(data = incidents_by_state2) %>%
setView(-96, 37.8, 4) %>%
addTiles() %>%
addProviderTiles("MapBox", options = providerTileOptions(id = "mapbox.light",accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(total_incidents),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~total_incidents, opacity = 0.7, title = "Incidents", position = "bottomright")
labels <- sprintf(
"<strong>%s</strong><br/>$%g million<br/>Top MS-DRG: %s<br/>%g discharges",
incidents_by_state2$NAME, incidents_by_state2$total_incidents, incidents_by_state2$total_injured, incidents_by_state2$total_killed
) %>% lapply(htmltools::HTML)
leaflet(data = incidents_by_state2) %>%
setView(-96, 37.8, 4) %>%
addTiles() %>%
addProviderTiles("MapBox", options = providerTileOptions(id = "mapbox.light",accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(total_incidents),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~total_incidents, opacity = 0.7, title = "Total Incidents", position = "bottomright")
#Load all required packages
library(tidyverse); library(leaflet); library(rgdal); library(sp); library(readr); library(plotly); library(scales);
library(kableExtra); library(treemapify)
# Read in data: set wd to data folder in your repo
ipps <- read_csv("ipps_2016.csv")                 # ipps data
labels <- sprintf(
incidents_by_state2$NAME, incidents_by_state2$total_incidents, incidents_by_state2$total_injured, incidents_by_state2$total_killed
) %>% lapply(htmltools::HTML)
labels <- paste0("<strong>State: </strong>",
incidents_by_state2$NAME,
"<br><strong>Total Incidents </strong>",
incidents_by_state2$total_incidents,
"<br><strong>Total Injured </strong>",
incidents_by_state2$total_injured,
"<br><strong>Total Killed </strong>",
incidents_by_state2$total_killed) %>% lapply(htmltools::HTML)
leaflet(data = incidents_by_state2) %>%
setView(-96, 37.8, 4) %>%
addTiles() %>%
addProviderTiles("MapBox", options = providerTileOptions(id = "mapbox.light",accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(total_incidents),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~total_incidents, opacity = 0.7, title = "Total Incidents", position = "bottomright")
